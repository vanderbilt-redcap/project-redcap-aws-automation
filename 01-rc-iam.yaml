# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with the License. 
# A copy of the License is located at
#    http://aws.amazon.com/apache2.0/
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific language governing permissions and limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: This CloudFormation Template creates the VPC, subnets, routing, NAT Gateways, security groups and IAM Roles to support REDCap.

Parameters:
  RedcapS3Bucket:
    Description: "S3 bucket that contains your REDCap binary file"
    Type: String
    Default: redcap-test

  SubnetPublicA:
    Type: AWS::EC2::Subnet::Id


Resources:

#Elastic Beanstalk IAM Roles
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: elasticbeanstalk.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': elasticbeanstalk
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DescribeInstanceHealth'
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                  - 'elasticloadbalancing:DescribeTargetHealth'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:GetConsoleOutput'
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:DescribeSecurityGroups'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:GetQueueUrl'
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'autoscaling:DescribeAutoScalingInstances'
                  - 'autoscaling:DescribeScalingActivities'
                  - 'autoscaling:DescribeNotificationConfigurations'
                Resource:
                  - '*'
      Path: /
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceProfileRole
  InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: BucketAccess
                Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::elasticbeanstalk-*-'
                      - !Ref 'AWS::AccountId'
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::elasticbeanstalk-*-'
                      - !Ref 'AWS::AccountId'
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::elasticbeanstalk-*-'
                      - !Ref 'AWS::AccountId'
                      - '-*'
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::elasticbeanstalk-*-'
                      - !Ref 'AWS::AccountId'
                      - '-*/*'
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::cf-templates-*'
                      - !Ref 'AWS::AccountId'
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::cf-templates-*'
                      - !Ref 'AWS::AccountId'
                      - '/*'
                  - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'SubnetPublicA'] ], '-redcapebapp' ] ]
                  - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'SubnetPublicA'] ], '-redcapebapp', '/*' ] ]
              - Sid: MetricsAccess
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: '*'
              - Sid: SSMAccess
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:GetParameter'
                Effect: Allow
                Resource: 'arn:aws:ssm:*:*:parameter/redcap-salt'
              - Sid: EncryptedEBS
                Action:
                  - 'ec2:CreateVolume'
                  - 'ec2:AttachVolume'
                  - 'ec2:ModifyInstanceAttribute'
                  - "ec2:Describe*"
                Effect: Allow
                Resource: '*'
              - Sid: CreateNewEBVersion
                Action:
                  - 'elasticbeanstalk:RetrieveEnvironmentInfo'
                  - "elasticbeanstalk:DescribeEnvironments"
                  - "elasticbeanstalk:DescribeEvents"
                  - "elasticbeanstalk:DescribeConfigurationOptions"
                  - "elasticbeanstalk:DescribeInstancesHealth"
                  - "elasticbeanstalk:DescribeApplicationVersions"
                  - "elasticbeanstalk:DescribeEnvironmentHealth"
                  - "elasticbeanstalk:DescribeApplications"
                  - "elasticbeanstalk:ListPlatformVersions"
                  - "elasticbeanstalk:DescribeEnvironmentResources"
                  - "elasticbeanstalk:DescribeEnvironmentManagedActions"
                  - "elasticbeanstalk:RequestEnvironmentInfo"
                  - "elasticbeanstalk:DescribeEnvironmentManagedActionHistory"
                  - "elasticbeanstalk:CreateApplicationVersion"
                  - "elasticbeanstalk:ValidateConfigurationSettings"
                  - "elasticbeanstalk:DescribeConfigurationSettings"
                  - "elasticbeanstalk:CheckDNSAvailability"
                  - "elasticbeanstalk:ListAvailableSolutionStacks"
                  - "elasticbeanstalk:DescribePlatformVersion"
                  - "elasticbeanstalk:UpdateEnvironment"
                  - "cloudformation:GetTemplate"
                  - 'cloudformation:DescribeStackResources'
                  - 'cloudformation:DescribeStackResource'
                  - 'cloudformation:UpdateStack'
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackEvents"
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:SuspendProcesses"
                  - "autoscaling:DescribeScalingActivities"
                  - "autoscaling:ResumeProcesses"
                  - "autoscaling:DescribeLaunchConfigurations"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DescribeLoadBalancers"
                Effect: Allow
                Resource: '*'
      Path: /





#IAM Roles for the temporary EC2 server to inject the ebextenstions files in to the REDCap source package.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  EC2RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 
              - "s3:*"
              - "cloudformation:DescribeStackResources"
              - "cloudformation:DescribeStackResource"
            Resource: 
              - !Join [ "", [ 'arn:aws:s3:::', !Ref RedcapS3Bucket ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref RedcapS3Bucket, '/*' ] ]              
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'SubnetPublicA'] ], '-redcapebapp' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'SubnetPublicA'] ], '-redcapebapp', '/*' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'SubnetPublicA'] ], '-redcaprepository' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'SubnetPublicA'] ], '-redcaprepository', '/*' ] ]
          - Effect: Allow
            Action:
              - "elasticbeanstalk:ListAvailableSolutionStacks"
            Resource:
              - '*'
          - Effect: Allow
            Action: 
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource: 'arn:aws:logs:*:*:*'
      Roles:
        - !Ref 'EC2Role'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'EC2Role'

  # '${AWS::AccountId}-${subnetpublica}-redcaprepository'
  #IAM User and Access/Secret Key to be used by REDCap to access S3 as a File Repository
  REDCapUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: 
                - "s3:*"
              Resource: 
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'SubnetPublicA'] ], '-redcaprepository' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'SubnetPublicA'] ], '-redcaprepository', '/*' ] ]
  REDCapAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref REDCapUser





#Return the created resources to the Master template
Outputs:
  EBServiceRole:
    Value: !Ref 'ServiceRole'
  EBInstanceProfile:
    Value: !Ref 'InstanceProfile'
  TempEC2InstanceProfile:
    Value: !Ref 'EC2InstanceProfile'
  S3AccessKey:
    Value: !Ref REDCapAccessKey
  S3SecretKey:
    Value: !GetAtt REDCapAccessKey.SecretAccessKey